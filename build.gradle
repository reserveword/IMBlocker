plugins {
    id 'eclipse'
    id 'idea'
    id 'java'
}

allprojects {
    repositories {
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
        maven {
            url = "https://www.cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven {
            name = "CottonMC"
            url = "https://server.bbkr.space/artifactory/libs-release"
            content {
                includeGroup "io.github.cottonmc"
            }
        }
        maven {
            url "https://maven.shedaniel.me/"
            content {
                includeGroupAndSubgroups "me.shedaniel"
                includeGroup "dev.architectury"
            }
        }
        maven {
            url = "https://maven.terraformersmc.com"
            content {
                includeGroup "com.terraformersmc"
                includeGroup "dev.emi"
            }
        }
        mavenCentral()
        maven {
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
        maven {
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
    }

    def all_properties = [
            minecraft_version   : minecraft_version,
            mod_id              : mod_id,
            mod_name            : mod_name,
            mod_version         : mod_version,
            mod_logo            : mod_logo,
            mod_url             : mod_url,
            issues_url          : issues_url,
            maven_group         : maven_group,
            license             : license,
            credits             : credits,
            author              : author,
            email               : email,
            description         : mod_description,
            fabric_version      : fabric_version,
            yarn_mappings       : yarn_mappings,
            loader_version      : loader_version,
            loader_version_range: loader_version_range,
    ]

    tasks.withType(ProcessResources).configureEach {
        inputs.properties all_properties

        filesMatching(['META-INF/mods.toml', 'fabric.mod.json', 'pack.mcmeta']) {
            expand all_properties
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    }

    tasks.register('feedbackClass', Copy) {
        dependsOn "jar"
        mustRunAfter ":fabric:remapJar"
        from (zipTree(new File(buildDir, "libs/${project.name}.jar"))) {
            include '**/*.class'
        }
        into new File(rootProject.buildDir, 'classes/java/main')
    }

    tasks.register('feedbackResource', Copy) {
        dependsOn "jar"
        mustRunAfter ":fabric:remapJar"
        from (zipTree(new File(buildDir, "libs/${project.name}.jar"))) {
            exclude '**/*.class'
        }
        into new File(rootProject.buildDir, 'resources/main')
    }

    tasks.register('feedback') {
        dependsOn("feedbackClass")
        dependsOn("feedbackResource")
    }
}

base.archivesName = "${rootProject.name}_${mod_version}+${minecraft_version}"

project.jar {
    dependsOn ':common:feedback'
    dependsOn ':forge:feedback'
    dependsOn ':fabric:feedback'
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : author,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : rootProject.name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    exclude 'io/github/reserveword/imblocker/asmdummy'
}
